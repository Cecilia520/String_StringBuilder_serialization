序列化和反序列化：
序列化：将数据结构或对象转换成二进制的过程；
反序列化：将在序列化过程中所生成的二进制串转化成数据结构
特点：
每种序列化协议在设计之初都有自己独特的应用场景，具有以下特性：
1.通用性，其具有两个层面上的意义，一是技术层面，即序列化协议是否支持跨平台、跨语言，如果不支持，在技术层面上的通用性就比较低啦；二是流行程度，序列化和反序列化需要多方参与，很少人使用的协议往往意味着昂贵的学习成本，另外流行度低的协议往往也缺乏稳定而成熟的跨语言、跨平台的公共包；
2.强健性,其主要体现在两个方面——成熟度够足和语言/平台的公平性，如果以上有任意一个缺乏就会导致协议不够强健；
3.可调试性或可读性
由于序列化和反序列化都是和二进制串打交道，其数据的正确性和业务的正确性直接影响到开发效率，而序列化后二进制串不具备人眼可读性，为了验证序列化结果的正确性，写入方不得同时写反序列化程序或提供一个查询平台，一般比较费时，另外读取方要成功实现反序列化比较困难而如果出现支持不到位、访问受限制等问题更显得问题的严重性；
4.性能
一般协议的性能也比较重要，一般体现在是时间复杂度和空间复杂度，序列化需要在原有的数据上加上描述字段，为反序列化解析之用，但是有时候序列化过程的开销比较大，可能会导致过大的网络、磁盘等方面的压力，而另一方面负责的序列化协议或试解析浪费很多时间；
5.安全性
在序列化选型的过程中，安全性的考虑往往在跨局域网访问时比较看重，如果使用得序列化协议没有兼容而成熟的HTTP传输层框架支持，一般会导致服务可用性降低、重新实现安全协议的成本过高、开放更多的防火墙端口和协议访问等问题；
6.可扩展性
在现如今移动互联的时代，业务系统需求更新周期变得特别快，这就需要序列化协议具有良好的可扩展性，支持自动增加新的业务字段，而不影响其他的服务；
组件：IDL文件——参与通讯的各方需要对通讯的内容进行约定；
IDL Compiler——将IDL文件转换成各语言对应的动态库
Stub/Skeleton Lib——负责序列化和反序列化的工作代码
Client/Server——指的是应用层程序代码
底层协议栈和互联网：序列化之后的数据通过底层的传输层、网络层、链路层以及物理层协议转换成数字信号在互联网中传递。
作用：是系统重构或设计的一个重要环节；
常见的几种序列化协议和反序列化协议：
1.XML&SOAP
XML是一种常用的序列化和反序列化协议，具有跨机器，跨语言等优点；
SOAP（Simple Object Access protocol） 是一种被广泛应用的，基于XML为序列化和反序列化协议的结构化消息传递协议，具有安全、可扩展、跨语言、跨平台并支持多种传输层协议等特点。
一般应用在穿越防火墙时具有良好的安全特性，另外XML具有可调试性，对于在公司之间传输数据量相对小或者实时性要求相对低（例如秒级别）的服务是一个好的选择。
2.JSON
其本质是就是采用"Attribute－value"的方式来描述对象，由于具有具备JS的先天性支持特性，所以被广泛应用于WEB browser的应用场景中，另外与XML相比，其协议比较简单，解析速度比较快，松散的Associative array使得其具有良好的可扩展性和兼容性。
其JSON＋HTTP模式，适合跨防火墙访问。
3.Thrift
Thrift是Facebook开源提供的一个高性能，轻量级RPC服务框架，其产生正是为了满足当前大数据量、分布式、跨语言、跨平台数据通讯的需求。适用于作为公司内部的面向服务构建（SOA）的标准RPC框架。
4.Avro
Avro提供两种序列化格式：JSON格式或者Binary格式。Binary格式在空间开销和解析性能方面可以和Protobuf媲美，JSON格式方便测试阶段的调试。Avro在做文件持久化的时候，一般会和Schema一起存储，所以Avro序列化文件自身具有自我描述属性，所以非常适合于做Hive、Pig和MapReduce的持久化数据格式。
小结：
1.XML序列化（Xstream）无论在性能和简洁性上比较差。
2、Thrift与Protobuf相比在时空开销方面都有一定的劣势。
3、Protobuf和Avro在两方面表现都非常优越
对于几种序列化和反序列化协议的比较：
 1、对于公司间的系统调用，如果性能要求在100ms以上的服务，基于XML的SOAP协议是一个值得考虑的方案。
2、基于Web browser的Ajax，以及Mobile app与服务端之间的通讯，JSON协议是首选。对于性能要求不太高，或者以动态类型语言为主，或者传输数据载荷很小的的运用场景，JSON也是非常不错的选择。
3、对于调试环境比较恶劣的场景，采用JSON或XML能够极大的提高调试效率，降低系统开发成本。
4、当对性能和简洁性有极高要求的场景，Protobuf，Thrift，Avro之间具有一定的竞争关系。
5、对于T级别的数据的持久化应用场景，Protobuf和Avro是首要选择。如果持久化后的数据存储在Hadoop子项目里，Avro会是更好的选择。
6、由于Avro的设计理念偏向于动态类型语言，对于动态语言为主的应用场景，Avro是更好的选择。
7、对于持久层非Hadoop项目，以静态类型语言为主的应用场景，Protobuf会更符合静态类型语言工程师的开发习惯。
8、如果需要提供一个完整的RPC解决方案，Thrift是一个好的选择。
9、如果序列化之后需要支持不同的传输层协议，或者需要跨防火墙访问的高性能场景，Protobuf可以优先考虑。
